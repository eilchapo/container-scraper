import express from "express";
import puppeteer from "puppeteer";

const app = express();
app.use(express.json({ limit: "1mb" }));

/* ---------- helpers ---------- */
const SLOW = { waitUntil: "networkidle2", timeout: 60000 };
const short = (ms) => new Promise(r => setTimeout(r, ms));

function parseYMD(text) {
  if (!text) return null;
  const iso = String(text).match(/\b\d{4}-\d{2}-\d{2}\b/)?.[0];
  if (iso) return iso;
  const dmy = String(text).match(/\b(\d{1,2})[\/\-\.](\d{1,2})[\/\-\.](\d{4})\b/);
  if (dmy) {
    let [ , d, m, y ] = dmy;
    if (Number(m) > 12) [d,m] = [m,d];
    const mm = String(m).padStart(2,"0");
    const dd = String(d).padStart(2,"0");
    return `${y}-${mm}-${dd}`;
  }
  const d = new Date(text);
  return isNaN(d) ? null : d.toISOString().slice(0,10);
}

function findEventDatesFromRows(rows) {
  const dischargeRow = rows.find(t =>
    /gate\s*out\s*full|gof|delivered\b|delivery\s*out|out[-\s]?gate|dlv\b|deliv\b/i.test(t)
  );
  const returnEmptyRow = rows.find(t =>
    /gate\s*in\s*empty|gie|empty\s*return|in[-\s]?gate\s*empty|returned\s*empty|empty\s*in[-\s]?gate/i.test(t)
  );
  return {
    dischargeDate: parseYMD(dischargeRow),
    returnEmptyDate: parseYMD(returnEmptyRow),
  };
}

/* ---------- carrier registry ---------- */
const CARRIERS = {
  YML: {
    brandPattern: /yangming|yang ming/i,
    home: "https://www.yangming.com/e-service/track_trace/track_trace_cargo_tracking.aspx",
    selectors: {
      input: "#ctl00_ContentPlaceHolder1_txtCntrNo, input[name*=Cntr], input[type=text]",
      button: "#ctl00_ContentPlaceHolder1_btnSearch, button[type=submit], button",
      rows: "table tr"
    }
  },
  CMA: {
    brandPattern: /cma[-\s]?cgm/i,
    home: "https://www.cma-cgm.com/ebusiness/tracking",
    selectors: {
      input: 'input[name*="Reference"], input[type="search"], input[type="text"]',
      button: 'button[type="submit"], button:has-text("Track"), button:has-text("Search")',
      rows: "table tr, .table tr"
    }
  },
  PIL: {
    brandPattern: /pil(ship)?/i,
    home: "https://www.pilship.com/en/tracking",
    selectors: {
      input: 'input[name*=container], input[type="search"], input[type="text"]',
      button: 'button[type="submit"], button:has-text("Track"), .track-btn, button',
      rows: "table tr"
    }
  },
  MSC: {
    brandPattern: /\bmsc\b|mediterranean shipping/i,
    home: "https://www.msc.com/en/track-a-shipment",
    selectors: {
      input: 'input[name*=container], input[name*=reference], input[type=search], input[type=text]',
      button: 'button[type=submit], button:has-text("Track"), button:has-text("Search"), button',
      rows: "table tr, .table tr"
    }
  },
  RCL: {
    brandPattern: /rcl|regional\s+container\s+lines/i,
    home: "https://rclgroup.com/track-trace/",
    selectors: {
      input: 'input[name*=container], input[type="search"], input[type="text"]',
      button: 'button[type="submit"], button:has-text("Track"), button',
      rows: "table tr"
    }
  },
  HPL: {
    brandPattern: /hapag|hpl|hapag-lloyd/i,
    home: "https://www.hapag-lloyd.com/en/online-business/tracing/tracing-by-container.html",
    selectors: {
      input: 'input[name*=container], input[type="search"], input[type="text"]',
      button: 'button[type="submit"], button:has-text("Track"), button',
      rows: "table tr"
    }
  },
  COSCO: {
    brandPattern: /cosco shipping/i,
    home: "https://elines.coscoshipping.com/ebusiness/cargotracking",
    selectors: {
      input: 'input[name*=container], input[id*=container], input[type=search], input[type=text]',
      button: 'button[type=submit], button:has-text("Track"), button:has-text("Search"), button',
      rows: "table tr, .table tr"
    }
  },
  EMC: {
    brandPattern: /evergreen|emc/i,
    home: "https://www.evergreen-line.com/tms/Tracking",
    selectors: {
      input: 'input[name*=container], input[id*=container], input[type=search], input[type=text]',
      button: 'button[type=submit], button:has-text("Track"), button:has-text("Search"), button',
      rows: "table tr, .table tr"
    }
  }
};

/* ---------- generic actions ---------- */
async function typeAndSearch(page, { input, button }, container) {
  const inputSel = input.split(",").map(s => s.trim());
  let ok = false;
  for (const sel of inputSel) {
    const el = await page.$(sel);
    if (el) {
      await el.click({ clickCount: 3 }).catch(()=>{});
      await el.type(container, { delay: 30 }).catch(()=>{});
      ok = true;
      break;
    }
  }
  if (!ok) throw new Error("Cannot find input box");

  const btnSel = button.split(",").map(s => s.trim());
  let clicked = false;
  for (const sel of btnSel) {
    const btn = await page.$(sel);
    if (btn) {
      await Promise.allSettled([
        btn.click().catch(()=>{}),
        page.waitForNavigation(SLOW).catch(()=>{})
      ]);
      clicked = true;
      break;
    }
  }
  if (!clicked) {
    await page.keyboard.press("Enter");
    await page.waitForNetworkIdle({ idleTime: 1200, timeout: 60000 }).catch(()=>{});
  }
}

async function extractRows(page, rowsSelector) {
  await short(500);
  const rows = await page.$$eval(rowsSelector, trs => trs.map(tr => {
    const tds = Array.from(tr.querySelectorAll("td,th")).map(td => td.innerText.trim());
    return tds.join(" | ");
  })).catch(()=>[]);
  return rows.filter(Boolean);
}

async function scrapeGenericCarrier(page, carrierCfg, container) {
  if (carrierCfg.home) {
    await page.goto(carrierCfg.home, SLOW);
  }
  await page.setExtraHTTPHeaders({ "Accept-Language": "en-US,en;q=0.9" });
  await typeAndSearch(page, carrierCfg.selectors, container);
  await page.waitForNetworkIdle({ idleTime: 1500, timeout: 60000 }).catch(()=>{});
  const rows = await extractRows(page, carrierCfg.selectors.rows || "table tr");
  const { dischargeDate, returnEmptyDate } = findEventDatesFromRows(rows);
  return { dischargeDate, returnEmptyDate, rawRows: rows };
}

/* ---------- smart fallback via search ---------- */
async function fallbackSmartSearch(page, carrierName, container) {
  await page.goto("https://duckduckgo.com/?q=" + encodeURIComponent(`${carrierName} container tracking`), SLOW);
  const links = await page.$$eval("a.result__a, a[data-testid='result-title-a']", as =>
    as.map(a => ({ href: a.href, text: a.innerText }))
  ).catch(()=>[]);
  const preferred = links.find(l =>
    /official|tracking|track|trace/i.test(l.text) ||
    /track|trace|tracking/i.test(l.href)
  ) || links[0];
  if (!preferred) throw new Error("No search results");

  await page.goto(preferred.href, SLOW);

  const guesses = [
    'input[name*=container]', 'input[id*=container]', 'input[placeholder*=container i]',
    'input[type=search]', 'input[type=text]'
  ];
  let found = false;
  for (const sel of guesses) {
    const el = await page.$(sel);
    if (el) {
      await el.click({ clickCount: 3 }).catch(()=>{});
      await el.type(container, { delay: 30 }).catch(()=>{});
      found = true;
      break;
    }
  }
  if (!found) throw new Error("No input detected on fallback page");

  const btnGuesses = [
    'button[type=submit]', 'button:has-text("Track")', 'button:has-text("Search")', 'button'
  ];
  let submitted = false;
  for (const sel of btnGuesses) {
    const el = await page.$(sel);
    if (el) {
      await Promise.allSettled([
        el.click().catch(()=>{}),
        page.waitForNavigation(SLOW).catch(()=>{})
      ]);
      submitted = true;
      break;
    }
  }
  if (!submitted) {
    await page.keyboard.press("Enter");
    await page.waitForNetworkIdle({ idleTime: 1200, timeout: 60000 }).catch(()=>{});
  }

  const rows = await extractRows(page, "table tr, .table tr");
  const { dischargeDate, returnEmptyDate } = findEventDatesFromRows(rows);
  return { dischargeDate, returnEmptyDate, rawRows: rows, fallbackUrl: preferred.href };
}

/* ---------- router ---------- */
async function doScrape(carrierName, container) {
  const browser = await puppeteer.launch({
    headless: "new",
    args: ["--no-sandbox", "--disable-setuid-sandbox"]
  });
  try {
    const page = await browser.newPage();
    await page.setUserAgent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124 Safari/537.36");
    await page.setViewport({ width: 1360, height: 900 });

    const code = String(carrierName || "").trim().toUpperCase();
    const cfg = CARRIERS[code] || CARRIERS[code.replace(/\s+/g, '')] || null;

    if (cfg) {
      try {
        const res = await scrapeGenericCarrier(page, cfg, container);
        if (res.dischargeDate || res.returnEmptyDate) return res;
        const brand = carrierName || code;
        return await fallbackSmartSearch(page, brand, container);
      } catch (_) {
        const brand = carrierName || code;
        return await fallbackSmartSearch(page, brand, container);
      }
    } else {
      return await fallbackSmartSearch(page, carrierName || "container line", container);
    }
  } finally {
    await browser.close();
  }
}

/* ---------- HTTP API ---------- */
app.post("/track", async (req, res) => {
  try {
    const { container, carrier } = req.body || {};
    if (!container) return res.status(400).json({ error: "Missing container" });
    if (!/^[A-Z]{4}\d{7}$/.test(String(container).toUpperCase())) {
      return res.status(400).json({ error: "Invalid container format" });
    }
    const result = await doScrape(carrier, container);
    return res.json({
      container,
      carrier,
      dischargeDate: result.dischargeDate || null,
      returnEmptyDate: result.returnEmptyDate || null
    });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: String(e.message || e) });
  }
});

app.get("/healthz", (_, res) => res.send("ok"));
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => console.log("Scraper listening on", PORT));
